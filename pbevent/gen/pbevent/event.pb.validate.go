// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: event.proto

package pbevent

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Event) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AuthorId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for Type

	if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EventValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on EventSettings with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *EventSettings) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for EventId

	// no validation rules for MaxParticipants

	// no validation rules for MinParticipants

	return nil
}

// EventSettingsValidationError is the validation error returned by
// EventSettings.Validate if the designated constraints aren't met.
type EventSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventSettingsValidationError) ErrorName() string { return "EventSettingsValidationError" }

// Error satisfies the builtin error interface
func (e EventSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEventSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventSettingsValidationError{}

// Validate checks the field values on GetEventRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventId

	return nil
}

// GetEventRequestValidationError is the validation error returned by
// GetEventRequest.Validate if the designated constraints aren't met.
type GetEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventRequestValidationError) ErrorName() string { return "GetEventRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventRequestValidationError{}

// Validate checks the field values on GetEventResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEventSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetEventResponseValidationError{
				field:  "EventSettings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetEventResponseValidationError is the validation error returned by
// GetEventResponse.Validate if the designated constraints aren't met.
type GetEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetEventResponseValidationError) ErrorName() string { return "GetEventResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetEventResponseValidationError{}

// Validate checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetAuthorId()) < 10 {
		return CreateEventRequestValidationError{
			field:  "AuthorId",
			reason: "value length must be at least 10 runes",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) < 5 {
		return CreateEventRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 5 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) < 20 {
		return CreateEventRequestValidationError{
			field:  "Description",
			reason: "value length must be at least 20 runes",
		}
	}

	if _, ok := _CreateEventRequest_Type_InLookup[m.GetType()]; !ok {
		return CreateEventRequestValidationError{
			field:  "Type",
			reason: "value must be in list [online offline mixed]",
		}
	}

	return nil
}

// CreateEventRequestValidationError is the validation error returned by
// CreateEventRequest.Validate if the designated constraints aren't met.
type CreateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequestValidationError) ErrorName() string {
	return "CreateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequestValidationError{}

var _CreateEventRequest_Type_InLookup = map[string]struct{}{
	"online":  {},
	"offline": {},
	"mixed":   {},
}

// Validate checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EventId

	return nil
}

// CreateEventResponseValidationError is the validation error returned by
// CreateEventResponse.Validate if the designated constraints aren't met.
type CreateEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventResponseValidationError) ErrorName() string {
	return "CreateEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventResponseValidationError{}
